// Generated by CoffeeScript 1.3.3
(function() {
  var Items, blankItem, canonicalListName, itemMapping, listModel, newListModel, reset_data, viewModel, vm;

  Items = new Meteor.Collection('items');

  reset_data = function() {
    var sample, samples, _i, _len;
    Items.remove({
      list: (typeof vm.listName === "function" ? vm.listName() : void 0) || 'Sample'
    });
    samples = [
      {
        "isEditing": false,
        "isMoving": false,
        "item": "Roadmap",
        "indent": 0,
        "archived": false,
        "sortOrder": 4,
        "list": "Roadmap",
        "_id": "97d4abee-6867-442c-b2e9-3424438849b0"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Previous Sprint",
        "indent": 1,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 6,
        "_id": "3ebe06d6-01b7-42e4-9323-71428e2b1cd7"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Archive before delete",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 8,
        "_id": "890f7b23-ce7d-490f-8730-19d714598c3f"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to unarchive",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 16,
        "_id": "b1b94d12-dcd4-43c0-8a9b-2c51456672f1"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Bigger, better action icons. Change to buttons?",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 24,
        "_id": "2aa3c11a-5fba-4337-8c0b-bb073f77ab90"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to rearrange items",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 32,
        "_id": "ffa8a7c6-96a1-456c-8355-73bf3f1f442f"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Should not be able to outdent past 0",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 40,
        "_id": "7720cf5e-a0a1-4e06-854d-ec469c1d4bfb"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to create a new uniquely named list",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 48,
        "_id": "9a1c15b3-b407-4a72-8d39-9cf3ae4a5ccf"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Shareable url for each list",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 56,
        "_id": "d2d146f1-b2d5-401c-b3b8-d422aa665f3a"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to clear archived items",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 64,
        "_id": "6179d1b4-9f0b-4ae9-8f4f-c3a5a4a85cbc"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to archive all items",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 72,
        "_id": "52d7ed7b-0e9d-4bf6-bcb0-d3385bd27f9d"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Should not be able to indent more than one level below parent",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 80,
        "_id": "9aa9a414-2069-41ac-800e-702de48cad1f"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Children should move with parent",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 88,
        "_id": "628781f9-d057-46f0-aadb-92b6538232f4"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Children should archive/delete with parent",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 96,
        "_id": "fc9b0d45-3b23-40b4-b1f8-b3b3ee8d3312"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Children should indent/outdent with parent",
        "indent": 2,
        "archived": true,
        "list": "Roadmap",
        "sortOrder": 104,
        "_id": "b11f97da-1c16-4dba-8b62-d602eb05ae65"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Current Sprint",
        "indent": 1,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 112,
        "_id": "9a3a83a2-2a3d-4288-a290-492f577cdec5"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to collapse/expand a parent",
        "indent": 2,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 120,
        "_id": "af96c717-ced6-4773-80f6-8059545804fb"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Actions column on right",
        "indent": 2,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 128,
        "_id": "7cd07624-5aef-4d76-a9dc-28c024f89d9b"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Header has slider buttons to switch to different action set",
        "indent": 3,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 136,
        "_id": "d85c1a9b-8369-480d-bdeb-716ff4caf385"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Max 2 buttons",
        "indent": 4,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 144,
        "_id": "c9d5aae7-4b39-4103-810d-c51d10c32a7c"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Indent/outdent",
        "indent": 4,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 152,
        "_id": "5e0c8e90-51ef-4ddf-917a-03e1dbda5869"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Archive/Unarchive",
        "indent": 4,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 160,
        "_id": "6f6a43fa-10c2-4695-80f1-461aa36a81f5"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Collapse/Expand",
        "indent": 4,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 168,
        "_id": "6078cf6b-4d4f-458c-a5e9-e7284d717506"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Textarea instead of single line textbox. Should grow instead of scroll and allow line breaks",
        "indent": 2,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 176,
        "_id": "d878bf36-1004-4be6-b5fc-cf90109906e9"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Natural keyboard behaviour",
        "indent": 2,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 184,
        "_id": "dce79e63-a20e-4c9f-a084-7bb38a5b1100"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Up/down arrows edits rows above or below",
        "indent": 3,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 192,
        "_id": "696970bc-e89d-4e7a-82ed-5a35477b4f7d"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Enter creates new item below",
        "indent": 3,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 200,
        "_id": "14ca0a10-fedd-4d4b-af77-b9cbd469a46f"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Backspace deletes characters until the start, then outdents until 0, then deletes item ",
        "indent": 3,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 208,
        "_id": "dbf8476b-8a56-4901-a8f4-a5ebbe23ae8d"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to password protect a list",
        "indent": 2,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 216,
        "_id": "6cf1cf92-1fb1-443e-acc0-72828b84b556"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Watcher password: if specified, requires a password to view the list",
        "indent": 3,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 224,
        "_id": "e608e881-24ac-47bf-8152-fc2a2909b490"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Contributor password: if specified, requires a password to edit the list",
        "indent": 3,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 232,
        "_id": "096fd4b9-a447-4970-b36d-d7d511e3f389"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Backlog",
        "indent": 1,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 240,
        "_id": "4f20d22d-2ac2-4afd-b19f-b0264baff932"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to add a checkbox column, parent indicates number of checked children",
        "indent": 2,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 248,
        "_id": "a6b541e9-4e4f-4e5d-addc-4d1241967c48"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to add a numeric column, parent shows sum of children",
        "indent": 2,
        "archived": false,
        "list": "Roadmap",
        "sortOrder": 256,
        "_id": "31a634c0-ceb9-4dae-9ff2-041595ddb145"
      }
    ];
    for (_i = 0, _len = samples.length; _i < _len; _i++) {
      sample = samples[_i];
      Items.insert({
        item: sample.item,
        indent: sample.indent,
        archived: sample.archived,
        list: (typeof vm.listName === "function" ? vm.listName() : void 0) || 'Sample',
        sortOrder: _i * 8
      });
    }
  };

  if (Meteor.is_client) {
    itemMapping = {
      item: {
        create: function(options) {
          var observable, parent;
          parent = options.parent;
          observable = ko.observable(options.data);
          parent.isEditing = ko.observable(false);
          parent.isMoving = ko.observable(false);
          parent.modeTemplate = function() {
            if (parent.isEditing()) {
              return 'itemEditing';
            } else {
              return 'item';
            }
          };
          parent.setEditing = function() {
            return parent.isEditing(true);
          };
          parent.clearEditing = function() {
            return parent.isEditing(false);
          };
          parent.doIndent = function() {
            var itm, maxIndent, pi, pos, _i, _len, _ref, _results;
            maxIndent = 0;
            pos = vm.vm().items().indexOf(parent);
            if (pos > 0) {
              maxIndent = vm.vm().items()[pos - 1].indent() + 1;
            }
            if (parent.indent() < maxIndent) {
              pi = parent.indent();
              Items.update(parent._id(), {
                $inc: {
                  indent: 1
                }
              });
              _ref = vm.vm().items.slice(pos + 1);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                itm = _ref[_i];
                if (itm.indent() <= pi) {
                  break;
                }
                _results.push(Items.update(itm._id(), {
                  $inc: {
                    indent: 1
                  }
                }));
              }
              return _results;
            }
          };
          parent.doOutdent = function() {
            var itm, pi, pos, _i, _len, _ref, _results;
            if (parent.indent() > 0) {
              pos = vm.vm().items().indexOf(parent);
              pi = parent.indent();
              Items.update(parent._id(), {
                $inc: {
                  indent: -1
                }
              });
              _ref = vm.vm().items.slice(pos + 1);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                itm = _ref[_i];
                if (itm.indent() <= pi) {
                  break;
                }
                _results.push(Items.update(itm._id(), {
                  $inc: {
                    indent: -1
                  }
                }));
              }
              return _results;
            }
          };
          parent.save = function() {
            parent.isEditing(false);
            return Items.update(parent._id(), {
              $set: {
                item: parent.item(),
                indent: parent.indent(),
                archived: false
              }
            });
          };
          parent.remove = function() {
            var itm, pi, pos, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
            pos = vm.vm().items().indexOf(parent);
            pi = parent.indent();
            if (parent.archived()) {
              Items.remove(parent._id());
              _ref = vm.vm().items.slice(pos + 1);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                itm = _ref[_i];
                if (itm.indent() <= pi) {
                  break;
                }
                _results.push(Items.remove(itm._id()));
              }
              return _results;
            } else {
              Items.update(parent._id(), {
                $set: {
                  archived: true
                }
              });
              _ref1 = vm.vm().items.slice(pos + 1);
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                itm = _ref1[_j];
                if (itm.indent() <= pi) {
                  break;
                }
                _results1.push(Items.update(itm._id(), {
                  $set: {
                    archived: true
                  }
                }));
              }
              return _results1;
            }
          };
          return observable;
        }
      }
    };
    blankItem = function() {
      var _this = this;
      this.item = ko.observable('');
      this.indent = ko.observable(0);
      this.save = function() {
        var items;
        items = vm.vm().items();
        Items.insert({
          item: _this.item(),
          indent: _this.indent(),
          archived: false,
          sortOrder: items.length ? items[items.length - 1].sortOrder() + 8 : 0,
          list: vm.listName()
        });
        return _this.item('');
      };
      this.doIndent = function() {
        var maxIndent;
        maxIndent = 0;
        try {
          maxIndent = vm.vm().items()[vm.vm().items().length - 1].indent() + 1;
        } catch (_error) {}
        if (_this.indent() < maxIndent) {
          return _this.indent(_this.indent() + 1);
        }
      };
      this.doOutdent = function() {
        if (_this.indent() > 0) {
          return _this.indent(_this.indent() - 1);
        }
      };
    };
    newListModel = function(parent) {
      var _this = this;
      this.name = ko.observable('');
      this.saveOnEnter = function(model, event) {
        if (event.which !== 13) {
          return true;
        }
        model.save();
        return false;
      };
      this.save = function() {
        Session.set('listName', canonicalListName(_this.name()));
        window.location.href = 'http://' + window.location.host + '/#!' + canonicalListName(_this.name());
        window.location.reload();
      };
    };
    listModel = function(parent) {
      var checkIndentationKeyBindings, indentOn2LeadingSpaces, isMoving, itemToInsert, items, itemsToMove, moveHere, moveItem, outdentOnBackspaceAndEmpty, saveOnEnter, _this;
      _this = this;
      items = ko.meteor.find(Items, {
        list: parent.listName()
      }, {
        sort: {
          sortOrder: 1
        }
      }, itemMapping);
      itemToInsert = new blankItem();
      isMoving = ko.observable(false);
      itemsToMove = [];
      indentOn2LeadingSpaces = function(model, event) {
        if (event.which !== 32) {
          return;
        }
        if (model.item().substr(0, 2) !== '  ') {
          return;
        }
        model.item(model.item().substring(2));
        return model.doIndent();
      };
      outdentOnBackspaceAndEmpty = function(model, event) {
        if (event.which !== 8) {
          return;
        }
        if (model.item() !== '') {
          return;
        }
        return model.doOutdent();
      };
      checkIndentationKeyBindings = function(model, event) {
        indentOn2LeadingSpaces(model, event);
        return outdentOnBackspaceAndEmpty(model, event);
      };
      saveOnEnter = function(model, event) {
        if (event.which !== 13) {
          return true;
        }
        model.save();
        return false;
      };
      moveItem = function(data) {
        var itm, pos, _i, _len, _ref;
        pos = items.indexOf(data);
        itemsToMove = [];
        itemsToMove.push(data);
        data.isMoving(true);
        _ref = items.slice(pos + 1);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          itm = _ref[_i];
          if (itm.indent() <= data.indent()) {
            break;
          }
          itemsToMove.push(itm);
          itm.isMoving(true);
        }
        return isMoving(true);
      };
      moveHere = function(data) {
        var i, indentIncrement, itm, newSortOrder, nextItem, sortIncrement, _i, _len;
        nextItem = items()[items.indexOf(data) + 1];
        sortIncrement = 8;
        indentIncrement = data.indent() < itemsToMove[0].indent() - 1 ? data.indent() - itemsToMove[0].indent() + 1 : 0;
        try {
          sortIncrement = (nextItem.sortOrder() - data.sortOrder()) / (itemsToMove.length + 1);
        } catch (_error) {}
        for (i = _i = 0, _len = itemsToMove.length; _i < _len; i = ++_i) {
          itm = itemsToMove[i];
          newSortOrder = data.sortOrder() + (sortIncrement * (i + 1));
          Items.update(itm._id(), {
            $set: {
              sortOrder: newSortOrder
            },
            $inc: {
              indent: indentIncrement
            }
          });
          itm.isMoving(false);
        }
        itemsToMove = [];
        return isMoving(false);
      };
      return {
        items: items,
        itemToInsert: itemToInsert,
        checkIndentationKeyBindings: checkIndentationKeyBindings,
        saveOnEnter: saveOnEnter,
        moveItem: moveItem,
        isMoving: isMoving,
        moveHere: moveHere
      };
    };
    viewModel = function() {
      var _this = this;
      this.listName = ko.observable(canonicalListName(Session.get('listName')));
      this.showingJSON = ko.observable(false);
      this.json = ko.observable('');
      this.templateToUse = function() {
        if (_this.listName()) {
          return 'socialist';
        } else {
          return 'newList';
        }
      };
      this.vm = ko.observable(this.listName() === '' ? new newListModel(this) : new listModel(this));
      this.listName.subscribe(function() {
        if (_this.listName() === '') {
          return _this.vm(new newListModel(_this));
        } else {
          return _this.vm(new listModel(_this));
        }
      });
      this.resetData = function() {
        return reset_data();
      };
      this.showJSON = function() {
        if (_this.vm().items) {
          _this.json(ko.mapping.toJSON(_this.vm().items));
        }
        _this.showingJSON(true);
        return setTimeout(function() {
          return _this.showingJSON(false);
        }, 10000);
      };
      this.newList = function() {
        Session.set('listName', '');
        return true;
      };
      this.delArchived = function() {
        return Items.remove({
          list: this.listName(),
          archived: true
        });
      };
      this.archiveAll = function() {
        var itm, _i, _len, _ref;
        if (_this.vm().items) {
          _ref = _this.vm().items();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            itm = _ref[_i];
            Items.update(itm._id(), {
              $set: {
                archived: true
              }
            });
          }
        }
      };
    };
    canonicalListName = function(name) {
      return name.replace(/[^-A-z0-9\s]*/g, '').replace(/\s+/g, '-');
    };
    Session.set('listName', window.location.hash.replace('#!', '') || '');
    vm = new viewModel();
    Meteor.startup(function() {
      return ko.applyBindings(vm);
    });
  }

  if (Meteor.is_server) {
    Meteor.startup(function() {
      if (Items.find().count() === 0) {
        return reset_data();
      }
    });
  }

}).call(this);
