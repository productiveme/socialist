// Generated by CoffeeScript 1.3.3
(function() {
  var Items, blankItem, canonicalListName, itemMapping, listModel, newListModel, reset_data, viewModel, vm;

  Items = new Meteor.Collection('items');

  reset_data = function() {
    var sample, samples, _i, _len;
    Items.remove({
      list: (typeof vm.listName === "function" ? vm.listName() : void 0) || 'Sample'
    });
    samples = [
      {
        "isEditing": false,
        "isMoving": false,
        "item": "Current Sprint",
        "indent": 0,
        "archived": false,
        "list": "Sample",
        "sortOrder": 0,
        "_id": "18b8cab5-c3ff-4146-8857-f05f13343ca1"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Archive before delete",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 8,
        "_id": "6ccf87a0-15af-44fe-8af3-724b06ede53e"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to unarchive",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 16,
        "_id": "d068666e-a6f8-41d5-9d6a-5972922b07d1"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Bigger, better action icons. Change to buttons?",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 24,
        "_id": "ce5a2b43-20c4-4668-8f95-eee40a9aaa70"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to rearrange items",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 32,
        "_id": "bfbcf42e-3e27-4843-805b-f0816239d1fa"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Should not be able to outdent past 0",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 40,
        "_id": "93e1f66c-7658-4721-9178-a478287592f7"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to create a new uniquely named list",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 44,
        "_id": "ea3c97d9-785c-46d2-9b4a-0e3e821c1b29"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Shareable url for each list",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 46,
        "_id": "480c53f2-2ab8-4d27-babc-9facd88dd0fb"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to clear archived items",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 47,
        "_id": "4272ebcd-15a9-46f1-8bfc-5e7019d45e6a"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to archive all items",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 47.5,
        "_id": "5948255b-fe56-4e16-be29-92b20f8e3173"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Should not be able to indent more than one level below parent",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 47.75,
        "_id": "1881c8f3-cb81-4ef1-85d8-d2c4d06d8ca2"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Children should move with parent",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 48,
        "_id": "3832b582-36a4-4cf0-a896-b49bf296c9bb"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Children should archive/delete with parent",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 64,
        "_id": "d0e6f0e0-0bfa-4be7-ae2f-15fbfaf69282"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Children should indent/outdent with parent",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 72,
        "_id": "af8725c6-1013-4f13-803c-aaaf611644d5"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to insert an item anywhere in the list",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 92,
        "_id": "f83b131e-7cd6-4f0a-83f1-384a9f8154f8"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Backlog",
        "indent": 0,
        "archived": false,
        "list": "Sample",
        "sortOrder": 104,
        "_id": "4b7adb1e-5f4f-41b6-9697-d11c5b187885"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to password protect a list",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 112,
        "_id": "934c0752-c323-44f6-bf25-e51128b5d4b9"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to add a checkbox column, parent indicates number of checked children",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 120,
        "_id": "5608c834-fa53-4767-b47b-f2f90ea53fac"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Ability to add a numeric column, parent shows sum of children",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 128,
        "_id": "6a7e6a6f-9379-4dcb-878a-ded43f6e6341"
      }, {
        "isEditing": false,
        "isMoving": false,
        "item": "Textarea instead of single line textbox. Should grow instead of scroll and allow line breaks",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 136,
        "_id": "796952aa-f787-449e-97cc-736c990bcad3"
      }
    ];
    for (_i = 0, _len = samples.length; _i < _len; _i++) {
      sample = samples[_i];
      Items.insert({
        item: sample.item,
        indent: sample.indent,
        archived: sample.archived,
        list: (typeof vm.listName === "function" ? vm.listName() : void 0) || 'Sample',
        sortOrder: sample.sortOrder
      });
    }
  };

  if (Meteor.is_client) {
    itemMapping = {
      item: {
        create: function(options) {
          var observable, parent;
          parent = options.parent;
          observable = ko.observable(options.data);
          parent.isEditing = ko.observable(false);
          parent.isMoving = ko.observable(false);
          parent.modeTemplate = function() {
            if (parent.isEditing()) {
              return 'itemEditing';
            } else {
              return 'item';
            }
          };
          parent.setEditing = function() {
            return parent.isEditing(true);
          };
          parent.clearEditing = function() {
            return parent.isEditing(false);
          };
          parent.doIndent = function() {
            var itm, maxIndent, pi, pos, _i, _len, _ref, _results;
            maxIndent = 0;
            pos = vm.vm().items().indexOf(parent);
            if (pos > 0) {
              maxIndent = vm.vm().items()[pos - 1].indent() + 1;
            }
            if (parent.indent() < maxIndent) {
              pi = parent.indent();
              Items.update(parent._id(), {
                $inc: {
                  indent: 1
                }
              });
              _ref = vm.vm().items.slice(pos + 1);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                itm = _ref[_i];
                if (itm.indent() <= pi) {
                  break;
                }
                _results.push(Items.update(itm._id(), {
                  $inc: {
                    indent: 1
                  }
                }));
              }
              return _results;
            }
          };
          parent.doOutdent = function() {
            var itm, pi, pos, _i, _len, _ref, _results;
            if (parent.indent() > 0) {
              pos = vm.vm().items().indexOf(parent);
              pi = parent.indent();
              Items.update(parent._id(), {
                $inc: {
                  indent: -1
                }
              });
              _ref = vm.vm().items.slice(pos + 1);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                itm = _ref[_i];
                if (itm.indent() <= pi) {
                  break;
                }
                _results.push(Items.update(itm._id(), {
                  $inc: {
                    indent: -1
                  }
                }));
              }
              return _results;
            }
          };
          parent.save = function() {
            parent.isEditing(false);
            return Items.update(parent._id(), {
              $set: {
                item: parent.item(),
                indent: parent.indent(),
                archived: false
              }
            });
          };
          parent.remove = function() {
            var itm, pi, pos, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
            pos = vm.vm().items().indexOf(parent);
            pi = parent.indent();
            if (parent.archived()) {
              Items.remove(parent._id());
              _ref = vm.vm().items.slice(pos + 1);
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                itm = _ref[_i];
                if (itm.indent() <= pi) {
                  break;
                }
                _results.push(Items.remove(itm._id()));
              }
              return _results;
            } else {
              Items.update(parent._id(), {
                $set: {
                  archived: true
                }
              });
              _ref1 = vm.vm().items.slice(pos + 1);
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                itm = _ref1[_j];
                if (itm.indent() <= pi) {
                  break;
                }
                _results1.push(Items.update(itm._id(), {
                  $set: {
                    archived: true
                  }
                }));
              }
              return _results1;
            }
          };
          return observable;
        }
      }
    };
    blankItem = function() {
      var _this = this;
      this.item = ko.observable('');
      this.indent = ko.observable(0);
      this.save = function() {
        var items;
        items = vm.vm().items();
        Items.insert({
          item: _this.item(),
          indent: _this.indent(),
          archived: false,
          sortOrder: items.length ? items[items.length - 1].sortOrder() + 8 : 0,
          list: vm.listName()
        });
        return _this.item('');
      };
      this.doIndent = function() {
        var maxIndent;
        maxIndent = 0;
        try {
          maxIndent = vm.vm().items()[vm.vm().items().length - 1].indent() + 1;
        } catch (_error) {}
        if (_this.indent() < maxIndent) {
          return _this.indent(_this.indent() + 1);
        }
      };
      this.doOutdent = function() {
        if (_this.indent() > 0) {
          return _this.indent(_this.indent() - 1);
        }
      };
    };
    newListModel = function(parent) {
      var _this = this;
      this.name = ko.observable('');
      this.saveOnEnter = function(model, event) {
        if (event.which !== 13) {
          return true;
        }
        model.save();
        return false;
      };
      this.save = function() {
        Session.set('listName', canonicalListName(_this.name()));
        window.location.href = 'http://' + window.location.host + '/#!' + canonicalListName(_this.name());
        window.location.reload();
      };
    };
    listModel = function(parent) {
      var checkIndentationKeyBindings, indentOn2LeadingSpaces, isMoving, itemToInsert, items, itemsToMove, moveHere, moveItem, outdentOnBackspaceAndEmpty, saveOnEnter, _this;
      _this = this;
      items = ko.meteor.find(Items, {
        list: parent.listName()
      }, {
        sort: {
          sortOrder: 1
        }
      }, itemMapping);
      itemToInsert = new blankItem();
      isMoving = ko.observable(false);
      itemsToMove = [];
      indentOn2LeadingSpaces = function(model, event) {
        if (event.which !== 32) {
          return;
        }
        if (model.item().substr(0, 2) !== '  ') {
          return;
        }
        model.item(model.item().substring(2));
        return model.doIndent();
      };
      outdentOnBackspaceAndEmpty = function(model, event) {
        if (event.which !== 8) {
          return;
        }
        if (model.item() !== '') {
          return;
        }
        return model.doOutdent();
      };
      checkIndentationKeyBindings = function(model, event) {
        indentOn2LeadingSpaces(model, event);
        return outdentOnBackspaceAndEmpty(model, event);
      };
      saveOnEnter = function(model, event) {
        if (event.which !== 13) {
          return true;
        }
        model.save();
        return false;
      };
      moveItem = function(data) {
        var itm, pos, _i, _len, _ref;
        pos = items.indexOf(data);
        itemsToMove = [];
        itemsToMove.push(data);
        data.isMoving(true);
        _ref = items.slice(pos + 1);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          itm = _ref[_i];
          if (itm.indent() <= data.indent()) {
            break;
          }
          itemsToMove.push(itm);
          itm.isMoving(true);
        }
        return isMoving(true);
      };
      moveHere = function(data) {
        var i, indentIncrement, itm, newSortOrder, nextItem, sortIncrement, _i, _len;
        nextItem = items()[items.indexOf(data) + 1];
        sortIncrement = 8;
        indentIncrement = data.indent() < itemsToMove[0].indent() - 1 ? data.indent() - itemsToMove[0].indent() + 1 : 0;
        try {
          sortIncrement = (nextItem.sortOrder() - data.sortOrder()) / (itemsToMove.length + 1);
        } catch (_error) {}
        for (i = _i = 0, _len = itemsToMove.length; _i < _len; i = ++_i) {
          itm = itemsToMove[i];
          newSortOrder = data.sortOrder() + (sortIncrement * (i + 1));
          Items.update(itm._id(), {
            $set: {
              sortOrder: newSortOrder
            },
            $inc: {
              indent: indentIncrement
            }
          });
          itm.isMoving(false);
        }
        itemsToMove = [];
        return isMoving(false);
      };
      return {
        items: items,
        itemToInsert: itemToInsert,
        checkIndentationKeyBindings: checkIndentationKeyBindings,
        saveOnEnter: saveOnEnter,
        moveItem: moveItem,
        isMoving: isMoving,
        moveHere: moveHere
      };
    };
    viewModel = function() {
      var _this = this;
      this.listName = ko.observable(canonicalListName(Session.get('listName')));
      this.showingJSON = ko.observable(false);
      this.json = ko.observable('');
      this.templateToUse = function() {
        if (_this.listName()) {
          return 'socialist';
        } else {
          return 'newList';
        }
      };
      this.vm = ko.observable(this.listName() === '' ? new newListModel(this) : new listModel(this));
      this.listName.subscribe(function() {
        if (_this.listName() === '') {
          return _this.vm(new newListModel(_this));
        } else {
          return _this.vm(new listModel(_this));
        }
      });
      this.resetData = function() {
        return reset_data();
      };
      this.showJSON = function() {
        if (_this.vm().items) {
          _this.json(ko.mapping.toJSON(_this.vm().items));
        }
        _this.showingJSON(true);
        return setTimeout(function() {
          return _this.showingJSON(false);
        }, 10000);
      };
      this.newList = function() {
        Session.set('listName', '');
        return true;
      };
      this.delArchived = function() {
        return Items.remove({
          list: this.listName(),
          archived: true
        });
      };
      this.archiveAll = function() {
        var itm, _i, _len, _ref;
        if (_this.vm().items) {
          _ref = _this.vm().items();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            itm = _ref[_i];
            Items.update(itm._id(), {
              $set: {
                archived: true
              }
            });
          }
        }
      };
    };
    canonicalListName = function(name) {
      return name.replace(/[^-A-z0-9\s]*/g, '').replace(/\s+/g, '-');
    };
    Session.set('listName', window.location.hash.replace('#!', '') || '');
    vm = new viewModel();
    Meteor.startup(function() {
      return ko.applyBindings(vm);
    });
  }

  if (Meteor.is_server) {
    Meteor.startup(function() {
      if (Items.find().count() === 0) {
        return reset_data();
      }
    });
  }

}).call(this);
