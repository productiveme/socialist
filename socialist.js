// Generated by CoffeeScript 1.3.3
(function() {
  var Items, reset_data, setIndentClass;

  Items = new Meteor.Collection('items');

  reset_data = function() {
    var curItem;
    Items.remove({});
    curItem = Items.insert({
      item: 'First Item',
      indent: 0,
      isEditing: false
    });
    curItem = Items.insert({
      item: 'Second Item',
      indent: 0,
      isEditing: false
    });
  };

  if (Meteor.is_client) {
    setIndentClass = function(el, indent) {
      el.removeClass();
      return el.addClass('indent' + indent);
    };
    _.extend(Template.socialist, {
      items: function() {
        return Items.find({});
      }
    });
    _.extend(Template.navbar, {
      events: {
        'click .reset_data': function() {
          return reset_data();
        }
      }
    });
    _.extend(Template.item, {
      events: {
        'click .remove': function() {
          return Items.remove(this._id);
        },
        'click .itemView': function() {
          return Items.update(this._id, {
            isEditing: true,
            item: this.item,
            indent: this.indent
          });
        },
        'click .outdent': function() {
          var _this = this;
          Items.update(this._id, {
            $inc: {
              indent: -1
            }
          });
          return Meteor.defer(function() {
            return $('.item_' + _this._id).focus();
          });
        },
        'keydown .itemEditingInput': function(evt) {
          var _this = this;
          if (!(evt.which === 8 && $('.item_' + this._id).val() === '')) {
            return;
          }
          if (this.indent === 0) {
            return;
          }
          Items.update(this._id, {
            $set: {
              item: $('.item_' + this._id).val()
            },
            $inc: {
              indent: -1
            }
          });
          return Meteor.defer(function() {
            return $('.item_' + _this._id).focus();
          });
        },
        'click .indent': function() {
          var _this = this;
          Items.update(this._id, {
            $inc: {
              indent: 1
            }
          });
          return Meteor.defer(function() {
            return $('.item_' + _this._id).focus();
          });
        },
        'keyup .itemEditingInput': function(evt) {
          var _this = this;
          if (!(evt.which === 32 && $('.item_' + this._id).val().substr(0, 2) === '  ')) {
            return;
          }
          $('.item_' + this._id).val($('.item_' + this._id).val().substring(2));
          Items.update(this._id, {
            $set: {
              item: $('.item_' + this._id).val()
            },
            $inc: {
              indent: 1
            }
          });
          return Meteor.defer(function() {
            return $('.item_' + _this._id).focus();
          });
        },
        'click .done, keyup .itemEditingInput': function(evt) {
          if (evt.type === 'keyup' && evt.which !== 13) {
            return;
          }
          return Items.update(this._id, {
            isEditing: false,
            item: $('.item_' + this._id).val(),
            indent: this.indent
          });
        }
      }
    });
    _.extend(Template.itemNew, {
      newItem: {
        item: '',
        indent: 0
      },
      events: {
        'click .outdent': function() {
          if (this.indent === 0) {
            return;
          }
          this.indent--;
          setIndentClass($('.item_new').parent(), this.indent);
          return $('.item_new').focus();
        },
        'keydown .itemEditingInput': function(evt) {
          if (!(evt.which === 8 && $('.item_new').val() === '')) {
            return;
          }
          if (this.indent === 0) {
            return;
          }
          this.indent--;
          setIndentClass($('.item_new').parent(), this.indent);
          return $('.item_new').focus();
        },
        'click .indent': function(evt) {
          this.indent++;
          setIndentClass($('.item_new').parent(), this.indent);
          return $('.item_new').focus();
        },
        'keyup .itemEditingInput': function(evt) {
          if (!(evt.which === 32 && $('.item_new').val().substr(0, 2) === '  ')) {
            return;
          }
          this.indent++;
          setIndentClass($('.item_new').parent(), this.indent);
          $('.item_new').val($('.item_new').val().substring(2));
          return $('.item_new').focus();
        },
        'click .done, keyup .itemEditingInput': function(evt) {
          if (evt.type === 'keyup' && evt.which !== 13) {
            return;
          }
          Items.insert({
            isEditing: false,
            item: $('.item_new').val(),
            indent: this.indent
          });
          return $('.item_new').val('');
        }
      }
    });
  }

  if (Meteor.is_server) {
    Meteor.startup(function() {
      if (Items.find().count() === 0) {
        return reset_data();
      }
    });
  }

}).call(this);
