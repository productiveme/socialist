// Generated by CoffeeScript 1.3.3
(function() {
  var Items, blankItem, canonicalListName, itemMapping, listModel, newListModel, reset_data, viewModel, vm;

  Items = new Meteor.Collection('items');

  reset_data = function() {
    var sample, samples, _i, _len;
    Items.remove({
      list: (typeof vm.listName === "function" ? vm.listName() : void 0) || 'Sample'
    });
    samples = [
      {
        "_id": "63cdab2e-7402-4397-839a-dc1a4e29a6b8",
        "isEditing": false,
        "item": "Current Sprint",
        "indent": 0,
        "archived": false,
        "list": "Sample",
        "sortOrder": 0
      }, {
        "_id": "b088463c-bf98-4350-8a88-c5e82beef6cb",
        "isEditing": false,
        "item": "Archive before delete",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 8
      }, {
        "_id": "99bf135f-8fa9-4961-959c-0adbb4077a5c",
        "isEditing": false,
        "item": "Ability to unarchive",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 16
      }, {
        "_id": "a3849832-b67f-4e5e-8f7e-c052df9cf125",
        "isEditing": false,
        "item": "Bigger, better action icons. Change to buttons?",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 24
      }, {
        "_id": "32b65b93-2a7c-496b-9a68-fcd205f437d7",
        "isEditing": false,
        "item": "Ability to rearrange items",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 32
      }, {
        "_id": "785122d5-0f49-4390-b8d4-28ba4ed6a493",
        "isEditing": false,
        "item": "Should not be able to outdent past 0",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 40
      }, {
        "_id": "85b8c0e1-1a2d-41c0-9e3f-6657298a001c",
        "isEditing": false,
        "item": "Ability to create a new uniquely named list",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 44
      }, {
        "_id": "7b73c85d-63de-4a3e-978d-0ee929ae1a6b",
        "isEditing": false,
        "item": "Shareable url for each list",
        "indent": 1,
        "archived": true,
        "list": "Sample",
        "sortOrder": 46
      }, {
        "_id": "039cef9a-36a9-443d-9376-3bb78b01eb09",
        "isEditing": false,
        "item": "Children should move with parent",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 48
      }, {
        "_id": "e8baf6d3-349a-4a30-aa7c-7f0853e1815e",
        "isEditing": false,
        "item": "Ability to insert an item anywhere in the list",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 56
      }, {
        "_id": "7795416a-2774-4d3a-b15f-f7472eafbf72",
        "isEditing": false,
        "item": "Children should archive/delete with parent",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 64
      }, {
        "_id": "e149284a-796c-4e32-8d87-4696f8870e16",
        "isEditing": false,
        "item": "Children should indent/outdent with parent",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 72
      }, {
        "_id": "b8556c4e-20d1-498b-947d-f3694257fc9c",
        "isEditing": false,
        "item": "Should not be able to indent more than one level below parent",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 80
      }, {
        "_id": "cd648315-bcae-4cd4-8f01-8f3886fe2271",
        "isEditing": false,
        "item": "Backlog",
        "indent": 0,
        "archived": false,
        "list": "Sample",
        "sortOrder": 104
      }, {
        "_id": "4d806c2d-7229-45a5-870f-147b96be2a80",
        "isEditing": false,
        "item": "Ability to password protect a list",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 112
      }, {
        "_id": "3a03c271-8510-4eb3-8a20-b9695bcd7673",
        "isEditing": false,
        "item": "Ability to add a checkbox column, parent indicates number of checked children",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 120
      }, {
        "_id": "28445766-f0dd-47a0-8dd0-7bc76808d813",
        "isEditing": false,
        "item": "Ability to add a numeric column, parent shows sum of children",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 128
      }, {
        "_id": "67a97434-3cc5-4bea-8a0d-781d2b2d0723",
        "isEditing": false,
        "item": "Textarea instead of single line textbox. Should grow instead of scroll and allow line breaks",
        "indent": 1,
        "archived": false,
        "list": "Sample",
        "sortOrder": 136
      }
    ];
    for (_i = 0, _len = samples.length; _i < _len; _i++) {
      sample = samples[_i];
      Items.insert({
        item: sample.item,
        indent: sample.indent,
        archived: sample.archived,
        list: (typeof vm.listName === "function" ? vm.listName() : void 0) || 'Sample',
        sortOrder: sample.sortOrder
      });
    }
  };

  if (Meteor.is_client) {
    itemMapping = {
      item: {
        create: function(options) {
          var observable, parent;
          parent = options.parent;
          observable = ko.observable(options.data);
          parent.isEditing = ko.observable(false);
          parent.modeTemplate = function() {
            if (parent.isEditing()) {
              return 'itemEditing';
            } else {
              return 'item';
            }
          };
          parent.setEditing = function() {
            return parent.isEditing(true);
          };
          parent.clearEditing = function() {
            return parent.isEditing(false);
          };
          parent.doIndent = function() {
            return parent.indent(parent.indent() + 1);
          };
          parent.doOutdent = function() {
            if (parent.indent() > 0) {
              return parent.indent(parent.indent() - 1);
            }
          };
          parent.save = function() {
            parent.isEditing(false);
            return Items.update(parent._id(), {
              $set: {
                item: parent.item(),
                indent: parent.indent(),
                archived: false
              }
            });
          };
          parent.remove = function() {
            if (parent.archived()) {
              return Items.remove(parent._id());
            } else {
              return Items.update(parent._id(), {
                $set: {
                  archived: true
                }
              });
            }
          };
          return observable;
        }
      }
    };
    blankItem = function() {
      var _this = this;
      this.item = ko.observable('');
      this.indent = ko.observable(0);
      this.save = function() {
        var items;
        items = vm.vm().items();
        Items.insert({
          item: _this.item(),
          indent: _this.indent(),
          archived: false,
          sortOrder: items.length ? items[items.length - 1].sortOrder() + 8 : 0,
          list: vm.listName()
        });
        return _this.item('');
      };
      this.doIndent = function() {
        return _this.indent(_this.indent() + 1);
      };
      this.doOutdent = function() {
        if (_this.indent() > 0) {
          return _this.indent(_this.indent() - 1);
        }
      };
    };
    newListModel = function(parent) {
      var _this = this;
      this.name = ko.observable('');
      this.save = function() {
        Session.set('listName', canonicalListName(_this.name()));
        window.location.href = 'http://' + window.location.host + '/#!' + canonicalListName(_this.name());
        window.location.reload();
      };
    };
    listModel = function(parent) {
      var checkIndentationKeyBindings, indentOn2LeadingSpaces, isMoving, itemToInsert, items, moveHere, moveItem, movingItemId, outdentOnBackspaceAndEmpty, saveOnEnter, _this;
      _this = this;
      items = ko.meteor.find(Items, {
        list: parent.listName()
      }, {
        sort: {
          sortOrder: 1
        }
      }, itemMapping);
      itemToInsert = new blankItem();
      isMoving = ko.observable(false);
      movingItemId = '';
      indentOn2LeadingSpaces = function(model, event) {
        if (event.which !== 32) {
          return;
        }
        if (model.item().substr(0, 2) !== '  ') {
          return;
        }
        model.item(model.item().substring(2));
        return model.doIndent();
      };
      outdentOnBackspaceAndEmpty = function(model, event) {
        if (event.which !== 8) {
          return;
        }
        if (model.item() !== '') {
          return;
        }
        return model.doOutdent();
      };
      checkIndentationKeyBindings = function(model, event) {
        indentOn2LeadingSpaces(model, event);
        return outdentOnBackspaceAndEmpty(model, event);
      };
      saveOnEnter = function(model, event) {
        if (event.which !== 13) {
          return true;
        }
        model.save();
        return false;
      };
      moveItem = function(data) {
        movingItemId = data._id();
        items.remove(data);
        return isMoving(true);
      };
      moveHere = function(data) {
        var newSortOrder, nextItem;
        nextItem = items()[items.indexOf(data) + 1];
        newSortOrder = data.sortOrder() + 10;
        try {
          newSortOrder = data.sortOrder() + (nextItem.sortOrder() - data.sortOrder()) / 2;
        } catch (_error) {}
        Items.update(movingItemId, {
          $set: {
            sortOrder: newSortOrder
          }
        });
        movingItemId = '';
        return isMoving(false);
      };
      return {
        items: items,
        itemToInsert: itemToInsert,
        checkIndentationKeyBindings: checkIndentationKeyBindings,
        saveOnEnter: saveOnEnter,
        moveItem: moveItem,
        isMoving: isMoving,
        moveHere: moveHere
      };
    };
    viewModel = function() {
      var _this = this;
      this.listName = ko.observable(canonicalListName(Session.get('listName')));
      this.showingJSON = ko.observable(false);
      this.json = ko.observable('');
      this.templateToUse = function() {
        if (_this.listName()) {
          return 'socialist';
        } else {
          return 'newList';
        }
      };
      this.vm = ko.observable(this.listName() === '' ? new newListModel(this) : new listModel(this));
      this.listName.subscribe(function() {
        if (_this.listName() === '') {
          return _this.vm(new newListModel(_this));
        } else {
          return _this.vm(new listModel(_this));
        }
      });
      this.resetData = function() {
        return reset_data();
      };
      this.showJSON = function() {
        if (_this.vm().items) {
          _this.json(ko.mapping.toJSON(_this.vm().items));
        }
        _this.showingJSON(true);
        return setTimeout(function() {
          return _this.showingJSON(false);
        }, 10000);
      };
      this.newList = function() {
        Session.set('listName', '');
        return true;
      };
      this.delArchived = function() {
        return Items.remove({
          list: this.listName(),
          archived: true
        });
      };
      this.archiveAll = function() {
        var itm, _i, _len, _ref;
        if (_this.vm().items) {
          _ref = _this.vm().items();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            itm = _ref[_i];
            Items.update(itm._id(), {
              $set: {
                archived: true
              }
            });
          }
        }
      };
    };
    canonicalListName = function(name) {
      return name.replace(/[^A-z0-9\s]*/g, '').replace(/\s+/g, '-');
    };
    Session.set('listName', window.location.hash.replace('#!', '') || '');
    vm = new viewModel();
    Meteor.startup(function() {
      return ko.applyBindings(vm);
    });
  }

  if (Meteor.is_server) {
    Meteor.startup(function() {
      if (Items.find().count() === 0) {
        return reset_data();
      }
    });
  }

}).call(this);
